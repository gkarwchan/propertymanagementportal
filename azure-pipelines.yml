
trigger:
  batch: true
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
  # - task: UseDotNet@2
  #   displayName: 'Use .NET SDK 8.x'
  #   inputs:
  #     version: '8.x'
  - task: DotNetCoreCLI@2
    displayName: 'Restore dependencies'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
  - task: DotNetCoreCLI@2
    displayName: 'Build the project'
    inputs:
      command: 'build'
      arguments: '--no-restore --configuration $(buildConfiguration)'
      projects: '**/*.csproj'
  - task: DotNetCoreCLI@2
    displayName: 'Install .NET tools from local manifest'
    inputs:
      command: custom
      custom: tool
      arguments: 'restore'
  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests - $(buildConfiguration)'
    inputs:
      command: 'test'
      arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourceDirectory)/TestResults/Coverage/'
      publishTestResults: true
      projects: '**/*.Tests.csproj'
  - task: DotNetCoreCLI@2
    displayName: 'Create code coverage report'
    inputs:
      command: custom
      custom: tool
      arguments: 'run reportgenerator -reports:$(Build.SourceDirectory)/**/coverage.covertura.xml -targetdir:$(Build.SourceDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage report'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourceDirectory)/**/coverage.cobertura.xml'
  - task: DotNetCoreCLI@2
    displayName: 'publish the project'
    inputs:
      command: 'publish'
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Release'
      projects: '**/*.csproj'
      publishWebProjects: false
      zipAfterPublish: true      
  - task: PublishBuildArtifacts@1
    displayName: 'publish artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
    condition: succeeded()
